/**
 * Mellov API
 * Mellov API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SongItem model module.
 * @module model/SongItem
 * @version 1.0.0
 */
class SongItem {
    /**
     * Constructs a new <code>SongItem</code>.
     * @alias module:model/SongItem
     * @param title {String} 
     * @param url {String} 
     * @param dateAdded {String} 
     * @param tags {Array.<String>} 
     */
    constructor(title, url, dateAdded, tags) { 
        
        SongItem.initialize(this, title, url, dateAdded, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, url, dateAdded, tags) { 
        obj['title'] = title;
        obj['url'] = url;
        obj['dateAdded'] = dateAdded;
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>SongItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SongItem} obj Optional instance to populate.
     * @return {module:model/SongItem} The populated <code>SongItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SongItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('dateAdded')) {
                obj['dateAdded'] = ApiClient.convertToType(data['dateAdded'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SongItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SongItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SongItem.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['dateAdded'] && !(typeof data['dateAdded'] === 'string' || data['dateAdded'] instanceof String)) {
            throw new Error("Expected the field `dateAdded` to be a primitive type in the JSON string but got " + data['dateAdded']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

SongItem.RequiredProperties = ["title", "url", "dateAdded", "tags"];

/**
 * @member {String} id
 */
SongItem.prototype['id'] = undefined;

/**
 * @member {String} title
 */
SongItem.prototype['title'] = undefined;

/**
 * @member {String} url
 */
SongItem.prototype['url'] = undefined;

/**
 * @member {String} dateAdded
 */
SongItem.prototype['dateAdded'] = undefined;

/**
 * @member {Array.<String>} tags
 */
SongItem.prototype['tags'] = undefined;






export default SongItem;

